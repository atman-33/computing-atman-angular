{"version":3,"file":"main.js","mappings":";;;;;;AAAA,MAAM,CAAC,OAAO,GAAG;IACb,IAAI,EAAE,UAAU;IAChB,IAAI,EAAE,WAAW;IACjB,IAAI,EAAE,IAAI;IACV,QAAQ,EAAE,UAAU;IACpB,QAAQ,EAAE,UAAU;IACpB,QAAQ,EAAE,UAAU;IACpB,gBAAgB,EAAE,IAAI;IACtB,QAAQ,EAAE,CAAC,4BAA4B,CAAC;IACxC,UAAU,EAAE,CAAC,6BAA6B,CAAC;IAC3C,GAAG,EAAE;QACD,WAAW,EAAE,wBAAwB;QACrC,aAAa,EAAE,2BAA2B;KAC7C;CACJ,CAAC;AAEF,+DAA+D;AAC/D,qBAAqB;AACrB,wBAAwB;AACxB,yBAAyB;AACzB,kBAAkB;AAClB,4BAA4B;AAC5B,4BAA4B;AAC5B,4BAA4B;AAC5B,8BAA8B;AAC9B,sDAAsD;AACtD,mDAAmD;AACnD,aAAa;AACb,sCAAsC;AACtC,2CAA2C;AAC3C,SAAS;AACT,KAAK;;;;;;;;;;;;;AC/BL,uDAAwC;AACxC,8EAAmD;AACnD,yDAAgD;AAChD,8EAA6C;AAUtC,IAAM,SAAS,GAAf,MAAM,SAAS;CAAG;AAAZ,SAAS;IARrB,mBAAM,EAAC;QACN,OAAO,EAAE;YACP,0BAAW;YACX,uBAAa,CAAC,OAAO,CAAC,SAAS,CAAC;SACjC;QACD,WAAW,EAAE,EAAE;QACf,SAAS,EAAE,EAAE;KACd,CAAC;GACW,SAAS,CAAG;AAAZ,8BAAS;;;;;;;;;;ACbtB;;;;;;;;;;GAUG;;;;;AAEH,iDAAiE;AACjE,sFAAuD;AAGhD,IAAM,IAAI,GAAV,MAAM,IAAI;CAwBhB;AAvBG;IAAC,oCAAsB,EAAC,MAAM,CAAC;;gCACpB;AAEX;IAAC,oBAAM,GAAE;;kCACI;AAEb;IAAC,oBAAM,GAAE;;mCACK;AAEd;IAAC,oBAAM,GAAE;;yCACW;AAEpB;IAAC,oBAAM,EAAC;QACJ,IAAI,EAAE,MAAM;QACZ,IAAI,EAAE,6BAAU;KACjB,CAAC;0DACI,6BAAU,oBAAV,6BAAU;oCAAC;AAEnB;IAAC,oBAAM,GAAE;;uCACS;AAElB;IAAC,oBAAM,GAAE;;uCACS;AAvBT,IAAI;IADhB,oBAAM,EAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;GACZ,IAAI,CAwBhB;AAxBY,oBAAI;;;;;;;;;;;;;AChBjB,iEAA8E;AAC9E,qEAAyC;AAEzC,MAAa,aAAa;CAczB;AAbG;IAAC,8BAAQ,GAAE;IACV,gCAAU,GAAE;IACZ,+BAAS,EAAC,EAAE,CAAC;;2CACD;AAEb;IAAC,2BAAK,GAAE;IACP,yBAAG,EAAC,CAAC,CAAC;IACN,4BAAI,EAAC,GAAG,EAAE,CAAC,MAAM,CAAC;;4CACL;AAEd;IAAC,8BAAQ,GAAE;IACV,gCAAU,GAAE;;kDACO;AAbxB,sCAcC;;;;;;;;;;;;ACjBD,IAAY,UAGX;AAHD,WAAY,UAAU;IAClB,iCAAmB;IACnB,mCAAqB;AACzB,CAAC,EAHW,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAGrB;;;;;;;;;;;;;;ACHD,uDAAkG;AAClG,gFAA+C;AAE/C,wFAAsD;AAG/C,IAAM,eAAe,GAArB,MAAM,eAAe;IAExB;;OAEG;IACH,YAA6B,YAA0B;QAA1B,iBAAY,GAAZ,YAAY,CAAc;IACvD,CAAC;IAGK,OAAO;;YACT,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE,CAAC;QAC7C,CAAC;KAAA;IAGK,QAAQ,CAA6B,EAAU;;YACjD,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC;KAAA;IAGK,MAAM,CAAS,aAA4B;;YAC7C,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC;QACzD,CAAC;KAAA;IAGK,YAAY,CAA6B,EAAU;;YACrD,OAAO,MAAM,IAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACpD,CAAC;KAAA;IAGK,MAAM,CAA6B,EAAU;;YAC/C,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;QACvC,CAAC;KAAA;CACJ;AAvBS;IADL,gBAAG,GAAE;;;gEACW,OAAO,oBAAP,OAAO;8CAEvB;AAGK;IADL,gBAAG,EAAC,KAAK,CAAC,CAAE,YAAY;;IACT,qCAAK,EAAC,IAAI,EAAE,sBAAa,CAAC;;;gEAAc,OAAO,oBAAP,OAAO;+CAE9D;AAGK;IADL,iBAAI,GAAE;IACO,oCAAI,GAAE;;iEAAgB,+BAAa,oBAAb,+BAAa;gEAAG,OAAO,oBAAP,OAAO;6CAE1D;AAGK;IADL,kBAAK,EAAC,KAAK,CAAC;IACO,qCAAK,EAAC,IAAI,EAAE,sBAAa,CAAC;;;gEAAc,OAAO,oBAAP,OAAO;mDAElE;AAGK;IADL,mBAAM,EAAC,KAAK,CAAC;IACA,qCAAK,EAAC,IAAI,EAAE,sBAAa,CAAC;;;gEAAc,OAAO,oBAAP,OAAO;6CAE5D;AA/BQ,eAAe;IAD3B,uBAAU,EAAC,OAAO,CAAC,CAAC,qBAAqB;;iEAMK,4BAAY,oBAAZ,4BAAY;GAL9C,eAAe,CAgC3B;AAhCY,0CAAe;;;;;;;;;;ACN5B;;;;;;;;;;GAUG;;;;AAEH,uDAAwC;AACxC,sFAAqD;AACrD,gFAA+C;AAC/C,yDAAgD;AAChD,sFAAoD;AAQ7C,IAAM,WAAW,GAAjB,MAAM,WAAW;CAAG;AAAd,WAAW;IANvB,mBAAM,EAAC;QACN,8CAA8C;QAC9C,OAAO,EAAE,CAAC,uBAAa,CAAC,UAAU,CAAC,CAAC,iCAAc,CAAC,CAAC,CAAC;QACrD,WAAW,EAAE,CAAC,kCAAe,CAAC;QAC9B,SAAS,EAAE,CAAC,4BAAY,CAAC;KAC1B,CAAC;GACW,WAAW,CAAG;AAAd,kCAAW;;;;;;;;;;;;;ACxBxB,iDAAuD;AACvD,+EAA+C;AAE/C,sFAAgD;AAGzC,IAAM,cAAc,GAApB,MAAM,cAAe,SAAQ,oBAAgB;IAE1C,UAAU,CAAC,aAA4B;;YACzC,MAAM,EAAC,IAAI,EAAE,KAAK,EAAE,WAAW,EAAC,GAAG,aAAa,CAAC;YACjD,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;gBACrB,IAAI;gBACJ,KAAK;gBACL,WAAW;gBACX,MAAM,EAAE,6BAAU,CAAC,OAAO;gBAC1B,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;gBACnC,SAAS,EAAE,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE;aACtC,CAAC,CAAC;YAEH,MAAM,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACtB,OAAO,IAAI,CAAC;QAChB,CAAC;KAAA;CACJ;AAhBY,cAAc;IAD1B,8BAAgB,EAAC,kBAAI,CAAC;GACV,cAAc,CAgB1B;AAhBY,wCAAc;;;;;;;;;;;;;;ACN3B,uDAA+D;AAE/D,sFAAgD;AAEhD,sFAAoD;AAG7C,IAAM,YAAY,GAAlB,MAAM,YAAY;IAIvB;;OAEG;IACH,YAA6B,cAA8B;QAA9B,mBAAc,GAAd,cAAc,CAAgB;QALnD,UAAK,GAAW,EAAE,CAAC;IAM3B,CAAC;IAEK,OAAO;;YACX,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,CAAC;QAC1C,CAAC;KAAA;IAEK,QAAQ,CAAC,EAAU;;YACvB,MAAM,KAAK,GAAG,MAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;YACpD,IAAI,CAAC,KAAK,EAAE;gBACV,MAAM,IAAI,0BAAiB,EAAE,CAAC;aAC/B;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KAAA;IAEK,MAAM,CAAC,aAA4B;;YACvC,OAAO,MAAM,IAAI,CAAC,cAAc,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;QAC7D,CAAC;KAAA;IAEK,YAAY,CAAC,EAAU;;YAC3B,MAAM,IAAI,GAAG,MAAM,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;YACrC,IAAI,CAAC,MAAM,GAAG,6BAAU,CAAC,QAAQ,CAAC;YAClC,IAAI,CAAC,SAAS,GAAG,IAAI,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;YAC1C,MAAM,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YACrC,OAAO,IAAI,CAAC;QACd,CAAC;KAAA;IAEK,MAAM,CAAC,EAAU;;YACrB,MAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QAC3C,CAAC;KAAA;CACF;AArCY,YAAY;IADxB,uBAAU,GAAE;iEAQkC,iCAAc,oBAAd,iCAAc;GAPhD,YAAY,CAqCxB;AArCY,oCAAY;;;;;;;;;ACPzB;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA;;;GAGG;;;AAEH,uDAAwD;AACxD,mDAA2C;AAE3C,oEAA6C;AAE7C,SAAe,SAAS;;QACtB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;QAChD,GAAG,CAAC,cAAc,CAAC,IAAI,uBAAc,EAAE,CAAC,CAAC;QAEzC,MAAM,YAAY,GAAG,KAAK,CAAC;QAC3B,GAAG,CAAC,eAAe,CAAC,YAAY,CAAC,CAAC;QAClC,MAAM,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,IAAI,IAAI,CAAC;QACtC,MAAM,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;QACvB,eAAM,CAAC,GAAG,CACR,kDAAkD,IAAI,IAAI,YAAY,EAAE,CACzE,CAAC;IACJ,CAAC;CAAA;AAED,SAAS,EAAE,CAAC","sources":["webpack:///./ormconfig.js","webpack:///./src/app/app.module.ts","webpack:///./src/app/entities/item.entity.ts","webpack:///./src/app/items/dto/create-item-dto.ts","webpack:///./src/app/items/item-status.enum.ts","webpack:///./src/app/items/items.controller.ts","webpack:///./src/app/items/items.module.ts","webpack:///./src/app/items/items.repository.ts","webpack:///./src/app/items/items.service.ts","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///external commonjs \"@nestjs/typeorm\"","webpack:///external commonjs \"class-transformer\"","webpack:///external commonjs \"class-validator\"","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"typeorm\"","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["module.exports = {\n    type: 'postgres',\n    host: 'localhost',\n    port: 5432,\n    username: 'postgres',\n    password: 'postgres',\n    database: 'postgres',\n    autoLoadEntities: true,\n    entities: ['dist/server/**/*.entity.js'],\n    migrations: ['dist/server/migrations/*.js'],\n    cli: {\n        entitiesDir: 'server/src/app/entites',\n        migrationsDir: 'server/src/app/migrations',\n    },\n};\n\n// これは NX では利用できないため参考！（dist にwebpack で統合された main.js のみ配置されるため）\n// module.exports = {\n//     type: 'postgres',\n//     host: 'localhost',\n//     port: 5432,\n//     username: 'postgres',\n//     password: 'postgres',\n//     database: 'postgres',\n//     autoLoadEntities: true,\n//     entities: ['dist/server/entities/*.entity.js'],\n//     migrations: ['dist/server/migrations/*.js'],\n//     cli: {\n//         entitiesDir: 'src/entites',\n//         migrationsDir: 'src/migrations',\n//     },\n// };","import { Module } from '@nestjs/common';\nimport { ItemsModule } from './items/items.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport * as ormconfig from '../../ormconfig';\n\n@Module({\n  imports: [ \n    ItemsModule,\n    TypeOrmModule.forRoot(ormconfig)\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","/**\n * ## entity, migration, repository の流れ\n * 1. entityを作成\n * 2. entity.tsをトランスパイルしjsに変換\n * 3. migration:generate により、jsに変換したentityからmigrationファイルを生成\n * 4. migration.tsをトランスパイルしjsに変換\n * 5. migration:run により、jsに変換したmigrationからmigrationを実行（DB操作）\n * 6. repositoryを作成\n * 7. moduleのimportsに、repositoryを登録\n *    ex. imports: [TypeOrmModule.forFeature([ItemRepository])],\n */\n\nimport { Column, Entity, PrimaryGeneratedColumn } from 'typeorm';\nimport { ItemStatus } from '../items/item-status.enum';\n\n@Entity({ name: 'item' })\nexport class Item {\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n\n    @Column()\n    name: string;\n\n    @Column()\n    price: number;\n\n    @Column()\n    description: string;\n\n    @Column({\n        type: 'enum',\n        enum: ItemStatus\n      })\n    status: ItemStatus;\n\n    @Column()\n    createdAt: string;\n\n    @Column()\n    updatedAt: string;\n}","import { IsInt, IsNotEmpty, IsString, MaxLength, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class CreateItemDto {\n    @IsString()\n    @IsNotEmpty()\n    @MaxLength(40)\n    name: string;\n\n    @IsInt()\n    @Min(1)\n    @Type(() => Number)\n    price: number;\n\n    @IsString()\n    @IsNotEmpty()\n    description: string;\n}","export enum ItemStatus {\n    ON_SALE = 'ON_SALE',\n    SOLD_OUT = 'SOLD_OUT',\n}","import { Body, Controller, Delete, Get, Param, ParseUUIDPipe, Patch, Post } from '@nestjs/common';\nimport { ItemsService } from './items.service';\nimport { Item } from '../entities/item.entity';\nimport { CreateItemDto } from './dto/create-item-dto';\n\n@Controller('items') // /items というpathに紐づけ\nexport class ItemsController {\n\n    /**\n     *\n     */\n    constructor(private readonly itemsService: ItemsService) {\n    }\n\n    @Get()\n    async findAll(): Promise<Item[]> {\n        return await this.itemsService.findAll();\n    }\n\n    @Get(':id')  // /items/id\n    async findById(@Param('id', ParseUUIDPipe) id: string): Promise<Item> {\n        return await this.itemsService.findById(id);\n    }\n\n    @Post()\n    async create(@Body() createItemDto: CreateItemDto): Promise<Item> {\n        return await this.itemsService.create(createItemDto);\n    }\n\n    @Patch(':id')\n    async updateStatus(@Param('id', ParseUUIDPipe) id: string): Promise<Item> {\n        return await this.itemsService.updateStatus(id);\n    }\n\n    @Delete(':id')\n    async delete(@Param('id', ParseUUIDPipe) id: string): Promise<void> {\n        await this.itemsService.delete(id);\n    }\n}\n","/**\n * ## 関連構造\n * module => controller => service => repository => entity\n *           ^             ^          ^\n *           dto           dto        dto      \n * - module     : Repository, Controller, Serviceを登録\n * - controller : ルーティング機能を実装（path(URL)を設定）\n * - service    : ビジネスロジックを実装（ex. repository経由でDB操作）\n * - repository : DB操作\n * - entity     : DBのデータ定義\n */\n\nimport { Module } from '@nestjs/common';\nimport { ItemsController } from './items.controller';\nimport { ItemsService } from './items.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { ItemRepository } from './items.repository';\n\n@Module({\n  // Repository の登録は、一つの機能に閉じた設定のためforFeatureを使用\n  imports: [TypeOrmModule.forFeature([ItemRepository])],\n  controllers: [ItemsController],\n  providers: [ItemsService],\n})\nexport class ItemsModule {}\n","import { EntityRepository, Repository } from 'typeorm';\nimport { Item } from '../entities/item.entity';\nimport { CreateItemDto } from './dto/create-item-dto';\nimport { ItemStatus } from './item-status.enum';\n\n@EntityRepository(Item)\nexport class ItemRepository extends Repository<Item> {\n\n    async createItem(createItemDto: CreateItemDto): Promise<Item> {\n        const {name, price, description} = createItemDto;\n        const item = this.create({\n            name,\n            price,\n            description,\n            status: ItemStatus.ON_SALE,\n            createdAt: new Date().toISOString(),\n            updatedAt: new Date().toISOString(),\n        });\n\n        await this.save(item);\n        return item;\n    }\n}","import { Injectable, NotFoundException } from '@nestjs/common';\nimport { Item } from '../entities/item.entity';\nimport { ItemStatus } from './item-status.enum';\nimport { CreateItemDto } from './dto/create-item-dto';\nimport { ItemRepository } from './items.repository';\n\n@Injectable()\nexport class ItemsService {\n\n  private items: Item[] = [];\n\n  /**\n   *\n   */\n  constructor(private readonly itemRepository: ItemRepository) {\n  }\n\n  async findAll(): Promise<Item[]> {\n    return await this.itemRepository.find();\n  }\n\n  async findById(id: string): Promise<Item> {\n    const found = await this.itemRepository.findOne(id);\n    if (!found) {\n      throw new NotFoundException();\n    }\n    return found;\n  }\n\n  async create(createItemDto: CreateItemDto): Promise<Item> {\n    return await this.itemRepository.createItem(createItemDto);\n  }\n\n  async updateStatus(id: string): Promise<Item> {\n    const item = await this.findById(id);\n    item.status = ItemStatus.SOLD_OUT;\n    item.updatedAt = new Date().toISOString();\n    await this.itemRepository.save(item);\n    return item;\n  }\n\n  async delete(id: string): Promise<void> {\n    await this.itemRepository.delete({ id });\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3000;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}