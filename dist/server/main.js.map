{"version":3,"file":"main.js","mappings":"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","sources":["webpack:///./data-source.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/auth/auth.controller.ts","webpack:///./src/app/auth/auth.module.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///./src/app/auth/decorator/get-user.decorator.ts","webpack:///./src/app/auth/decorator/role.decorator.ts","webpack:///./src/app/auth/dto/create-user-dto.ts","webpack:///./src/app/auth/dto/credentials.dto.ts","webpack:///./src/app/auth/guards/jwt-auth.guard.ts","webpack:///./src/app/auth/guards/roles.guard.ts","webpack:///./src/app/auth/jwt.strategy.ts","webpack:///./src/app/auth/user-status.enum.ts","webpack:///./src/app/entities/item.entity.ts","webpack:///./src/app/entities/user.entity.ts","webpack:///./src/app/items/dto/create-item-dto.ts","webpack:///./src/app/items/item-status.enum.ts","webpack:///./src/app/items/items.controller.ts","webpack:///./src/app/items/items.module.ts","webpack:///./src/app/items/items.service.ts","webpack:///external commonjs \"@nestjs/common\"","webpack:///external commonjs \"@nestjs/core\"","webpack:///external commonjs \"@nestjs/jwt\"","webpack:///external commonjs \"@nestjs/passport\"","webpack:///external commonjs \"@nestjs/typeorm\"","webpack:///external commonjs \"bcrypt\"","webpack:///external commonjs \"class-transformer\"","webpack:///external commonjs \"class-validator\"","webpack:///external commonjs \"passport-jwt\"","webpack:///external commonjs \"tslib\"","webpack:///external commonjs \"typeorm\"","webpack:///webpack/bootstrap","webpack:///./src/main.ts"],"sourcesContent":["import { DataSource, DataSourceOptions } from 'typeorm';\nimport { Item } from './src/app/entities/item.entity';\nimport { User } from './src/app/entities/user.entity';\n\nexport const dataSourceOptions: DataSourceOptions = {\n  type: 'postgres',\n  host: 'localhost',\n  port: 5432,\n  username: 'postgres',\n  password: 'postgres',\n  database: 'postgres',\n\n  /**\n   * migrationファイル生成及びentityへのメタデータ設定ファイル\n   * 注意: *.entity.ts/jsのファイル参照はエラーが発生するためクラスを指定\n   */\n  entities: [Item, User],\n\n  /**\n   * migrationファイルを生成するentityファイル \n   * 注意: ts参照だとモジュールでないためエラーが発生するのでトランスパイルしたjsを指定\n   */\n  migrations: ['dist/server/migrations/*.js'], \n};\n\nconst dataSource = new DataSource(dataSourceOptions);\nexport default dataSource;\n","import { Module } from '@nestjs/common';\nimport { ItemsModule } from './items/items.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from './auth/auth.module';\nimport { dataSourceOptions } from '../../data-source';\n\n@Module({\n  imports: [ItemsModule, TypeOrmModule.forRoot(dataSourceOptions), AuthModule],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n","import { Body, Controller, Post } from '@nestjs/common';\nimport { AuthService } from './auth.service';\nimport { CreateUserDto } from './dto/create-user-dto';\nimport { User } from '../entities/user.entity';\nimport { CredentialsDto } from './dto/credentials.dto';\n\n@Controller('auth')\nexport class AuthController {\n\n    /**\n     *\n     */\n    constructor(private readonly authService: AuthService) {\n    }\n\n    @Post('signup')\n    async signup(@Body() createUserDto: CreateUserDto): Promise<User>{\n        return await this.authService.signUp(createUserDto);\n    }\n\n    @Post('signin')\n    async signIn(@Body() credentialsDto: CredentialsDto): Promise<{ accessToken: string }> {\n        return await this.authService.signIn(credentialsDto);\n    }\n}\n","import { Module } from '@nestjs/common';\nimport { JwtModule } from '@nestjs/jwt';\nimport { PassportModule } from '@nestjs/passport';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { JwtStrategy } from './jwt.strategy';\nimport { JwtAuthGuard } from './guards/jwt-auth.guard';\nimport { RolesGuard } from './guards/roles.guard';\nimport { User } from '../entities/user.entity';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([User]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: 'secretKey123', // JWT秘密鍵 ※外部に漏洩しないよう注意!\n      signOptions: {\n        expiresIn: 3600,      // JWT有効期限（単位:秒）\n      }\n    })\n  ],\n  controllers: [AuthController],\n  // JwtStrategy, JwtAuthGuard, RolesGuardはDIさせるため追加\n  providers: [AuthService, JwtStrategy, JwtAuthGuard, RolesGuard],\n  // JwtStrategy, JwtAuthGuard, RolesGuardはitems.module（外部モジュール）で利用するため追加\n  exports: [JwtStrategy, JwtAuthGuard, RolesGuard]\n})\nexport class AuthModule { }\n","import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { CreateUserDto } from './dto/create-user-dto';\nimport { CredentialsDto } from './dto/credentials.dto';\nimport { User } from '../entities/user.entity';\nimport { JwtService } from '@nestjs/jwt';\n\nimport * as bcrypt from 'bcrypt';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n@Injectable()\nexport class AuthService {\n\n    constructor(\n        @InjectRepository(User) private readonly userRepository: Repository<User>,\n        private readonly jwtService: JwtService,\n    ) { }\n\n    async signUp(createUserDto: CreateUserDto): Promise<User> {\n        const { username, password, status } = createUserDto;\n        const salt = await bcrypt.genSalt();\n        const hashPassword = await bcrypt.hash(password, salt);\n\n        const user = this.userRepository.create({\n            username,\n            password: hashPassword,\n            status,\n        });\n\n        await this.userRepository.save(user);\n        return user;\n    }\n\n\n    async signIn(\n        credentialsDto: CredentialsDto,\n    ): Promise<{ accessToken: string; }> {\n        const { username, password } = credentialsDto;\n        const user = await this.userRepository.findOneBy({ username });\n\n        // compare(password, user.password) パスワードが同じか比較\n        // => password: 入力されたパスワード vs user.password: DBに保存しているHash化されたpassword\n        if (user && (await bcrypt.compare(password, user.password))) {\n            const payload = { id: user.id, username: user.username };\n            const accessToken = this.jwtService.sign(payload);\n            return { accessToken };\n        }\n        throw new UnauthorizedException(\n            'ユーザー名またはパスワードを確認してください',\n        );\n    }\n}\n","import { ExecutionContext, createParamDecorator } from '@nestjs/common';\n\nexport const GetUser = createParamDecorator((_, ctx: ExecutionContext) => {\n\n    // Httpのコンテキストを明示\n    const request = ctx.switchToHttp().getRequest();\n    return request.user;\n});","import { SetMetadata } from '@nestjs/common';\n\n/**\n * 認可が必要なロールを受け取り、メタデータに登録\n * （メタデータはguardで取得して認可処理）\n * @param statuses \n * @returns \n */\nexport const Role = (...statuses: string[]) => SetMetadata('statuses', statuses);","import { IsEnum, IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator';\nimport { UserStatus } from '../user-status.enum';\n\nexport class CreateUserDto {\n\n    @IsString()\n    @IsNotEmpty()\n    username: string;\n\n    @IsString()\n    @MinLength(8)\n    @MaxLength(32)\n    password: string;\n\n    @IsEnum(UserStatus)\n    status: UserStatus;\n}","import { IsNotEmpty, IsString, MaxLength, MinLength } from 'class-validator';\n\nexport class CredentialsDto {\n\n    @IsString()\n    @IsNotEmpty()\n    username: string;\n\n    @IsString()\n    @MinLength(8)\n    @MaxLength(32)\n    password: string;\n}","import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n/**\n * このGuardが適用されたリクエストハンドラは、\n * jwt認証に通過していない場合に実行されない。\n */\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt'){}","import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\n\n@Injectable()\n// CanActivate: Guardとして機能させるために必要 ※補足: AuthGuardはCanActivateを継承しているため不要\nexport class RolesGuard implements CanActivate {\n\n    /**\n     *\n     */\n    constructor(private reflector: Reflector) { // Reflector: デコレーターでセットしたメタデータを取得\n    }\n\n    canActivate(ctx: ExecutionContext): boolean {\n        const requiredStatuses = this.reflector.get<string[]>(\n            'statuses',\n            ctx.getHandler(),\n        );\n\n        // デコレーターに何も指定されていない場合は実行を許可\n        if (!requiredStatuses) {\n            return true;\n        }\n\n        // ユーザーのstatusが、メタデータから取得したstatusのいずれかに一致すれば実行を許可\n        const { user } = ctx.switchToHttp().getRequest();\n        return requiredStatuses.some((status) => user.status.includes(status));\n    }\n}","import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Strategy, ExtractJwt } from 'passport-jwt';\nimport { User } from '../entities/user.entity';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\n\n// PassportStrategy: NestJSでStrategyを使いやすくするfunction\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n\n    constructor(\n        @InjectRepository(User)\n        private userRepository: Repository<User>,\n    ) {\n        super({\n            jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n            ignoreExpiration: false,\n            secretOrKey: 'secretKey123',\n        });\n    }\n\n    // 自動で呼び出しされる処理であり、validateのメソッド名は変更不可\n    async validate(payload: { id: string; username: string; }): Promise<User> {\n        const { id, username } = payload;\n        const user = await this.userRepository.findOneBy({ id, username });\n\n        if (user) {\n            return user;\n        }\n        throw new UnauthorizedException();\n    }\n}","export enum UserStatus {\n    FREE = 'FREE',\n    PREMIUM = 'PREMIUM'\n}","/**\n * ## entity, migration, repository の流れ\n * 1. entityを作成\n * 2. entity.tsをトランスパイルしjsに変換\n * 3. migration:generate により、jsに変換したentityからmigrationファイルを生成\n * 4. migration.tsをトランスパイルしjsに変換\n * 5. migration:run により、jsに変換したmigrationからmigrationを実行（DB操作）\n * 6. repositoryを作成 ※TypeORM ver0.3.Xの場合、serviceにrepositoryをDI\n * 7. moduleのimportsに、repositoryを登録\n *    ex. imports: [TypeOrmModule.forFeature([ItemRepository])],\n */\n\nimport { Column, Entity, ManyToOne, PrimaryGeneratedColumn } from 'typeorm';\nimport { ItemStatus } from '../items/item-status.enum';\nimport { User } from './user.entity';\n\n@Entity()\nexport class Item {\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n\n    @Column()\n    name: string;\n\n    @Column()\n    price: number;\n\n    @Column()\n    description: string;\n\n    @Column({\n        type: 'enum',\n        enum: ItemStatus\n    })\n    status: ItemStatus;\n\n    @Column()\n    createdAt: string;\n\n    @Column()\n    updatedAt: string;\n\n    @Column()\n    userId: string;\n\n    @ManyToOne(() => User, (user) => user.items)\n    user: User;\n}","import { Column, Entity, OneToMany, PrimaryGeneratedColumn } from 'typeorm';\nimport { UserStatus } from '../auth/user-status.enum';\nimport { Item } from './item.entity';\nimport { Exclude } from 'class-transformer';\n\n@Entity()\nexport class User {\n\n    @PrimaryGeneratedColumn('uuid')\n    id: string;\n\n    @Column({ unique: true })\n    username: string;\n\n    @Column()\n    @Exclude({ toPlainOnly: true }) // toPlainOnly: レスポンスから除外する時はtrue\n    password: string;\n\n    @Column({\n        type: 'enum',\n        enum: UserStatus\n    })\n    status: UserStatus;\n\n    @OneToMany(() => Item, (item) => item.user)\n    items: Item[];\n}","import { IsInt, IsNotEmpty, IsString, MaxLength, Min } from 'class-validator';\nimport { Type } from 'class-transformer';\n\nexport class CreateItemDto {\n    @IsString()\n    @IsNotEmpty()\n    @MaxLength(40)\n    name: string;\n\n    @IsInt()\n    @Min(1)\n    @Type(() => Number)\n    price: number;\n\n    @IsString()\n    @IsNotEmpty()\n    description: string;\n}","export enum ItemStatus {\n    ON_SALE = 'ON_SALE',\n    SOLD_OUT = 'SOLD_OUT',\n}","import { Body, ClassSerializerInterceptor, Controller, Delete, Get, Param, ParseUUIDPipe, Patch, Post, UseGuards, UseInterceptors } from '@nestjs/common';\nimport { ItemsService } from './items.service';\nimport { Item } from '../entities/item.entity';\nimport { CreateItemDto } from './dto/create-item-dto';\nimport { JwtAuthGuard } from '../auth/guards/jwt-auth.guard';\nimport { GetUser } from '../auth/decorator/get-user.decorator';\nimport { User } from '../entities/user.entity';\nimport { Role } from '../auth/decorator/role.decorator';\nimport { UserStatus } from '../auth/user-status.enum';\nimport { RolesGuard } from '../auth/guards/roles.guard';\n\n// /items というpathに紐づけ\n@Controller('items') \n// ハンドラーがレスポンスを返す前にExcludeを付けたパスワードを除外する処理を挟む\n@UseInterceptors(ClassSerializerInterceptor)    \nexport class ItemsController {\n\n    /**\n     *\n     */\n    constructor(private readonly itemsService: ItemsService) {\n    }\n\n    @Get()\n    async findAll(): Promise<Item[]> {\n        return await this.itemsService.findAll();\n    }\n\n    @Get(':id')  // /items/id\n    async findById(@Param('id', ParseUUIDPipe) id: string): Promise<Item> {\n        return await this.itemsService.findById(id);\n    }\n\n    @Post()\n    @Role(UserStatus.PREMIUM)\n    // JwtAuthGuard適用 ※@Controller('xxx')直下に記載すればコントローラー全体に適用\n    @UseGuards(JwtAuthGuard, RolesGuard)    \n    async create(\n        @Body() createItemDto: CreateItemDto,\n        @GetUser() user: User): Promise<Item> {\n        // console.log(user);\n        return await this.itemsService.create(createItemDto, user);\n    }\n\n    @Patch(':id')\n    @UseGuards(JwtAuthGuard)\n    async updateStatus(\n        @Param('id', ParseUUIDPipe) id: string,\n        @GetUser() user: User): Promise<Item> {\n        return await this.itemsService.updateStatus(id, user);\n    }\n\n    @Delete(':id')\n    @UseGuards(JwtAuthGuard)\n    async delete(\n        @Param('id', ParseUUIDPipe) id: string,\n        @GetUser() user: User): Promise<void> {\n        await this.itemsService.delete(id, user);\n    }\n}\n","/**\n * ## 関連構造\n * module => controller => service(repository) => entity\n *           ^             ^          \n *           dto,guard     dto      \n * - module     : Repository, Controller, Serviceを登録\n * - controller : ルーティング機能を実装（path(URL)を設定）\n * - service    : ビジネスロジックを実装（ex. repository経由でDB操作）\n * - repository : DB操作 ※TypeORM ver0.3.Xの場合、serviceにrepositoryをDI\n * - entity     : DBのデータ定義\n */\n\nimport { Module } from '@nestjs/common';\nimport { ItemsController } from './items.controller';\nimport { ItemsService } from './items.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { AuthModule } from '../auth/auth.module';\nimport { Item } from '../entities/item.entity';\n\n@Module({\n  // Repository の登録は、一つの機能に閉じた設定のためforFeatureを使用\n  // importsにAuthModuleを追加 => exportsに記載したprovidersを利用可能\n  imports: [TypeOrmModule.forFeature([Item]), AuthModule],  \n  controllers: [ItemsController],\n  providers: [ItemsService],\n})\nexport class ItemsModule {}\n","import { BadRequestException, Injectable, NotFoundException } from '@nestjs/common';\nimport { Item } from '../entities/item.entity';\nimport { ItemStatus } from './item-status.enum';\nimport { CreateItemDto } from './dto/create-item-dto';\nimport { User } from '../entities/user.entity';\nimport { Repository } from 'typeorm';\nimport { InjectRepository } from '@nestjs/typeorm';\n\n@Injectable()\nexport class ItemsService {\n  constructor(\n    @InjectRepository(Item) private readonly itemRepository: Repository<Item>,\n  ) { }\n  async findAll(): Promise<Item[]> {\n    return await this.itemRepository.find();\n  }\n\n  async findById(id: string): Promise<Item> {\n    const found = await this.itemRepository.findOneBy({ id });\n    if (!found) {\n      throw new NotFoundException();\n    }\n    return found;\n  }\n\n  async create(createItemDto: CreateItemDto, user: User): Promise<Item> {\n    const { name, price, description } = createItemDto;\n    const item = this.itemRepository.create({\n      name,\n      price,\n      description,\n      status: ItemStatus.ON_SALE,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString(),\n      user,\n    });\n\n    await this.itemRepository.save(item);\n    return item;\n  }\n\n  async updateStatus(id: string, user: User): Promise<Item> {\n    const item = await this.findById(id);\n    if (item.userId === user.id) {\n      throw new BadRequestException('自身の商品を購入することはできません');\n    }\n    item.status = ItemStatus.SOLD_OUT;\n    item.updatedAt = new Date().toISOString();\n    const updatedItem = await this.itemRepository.update(id, {\n      status: item.status,\n      updatedAt: item.updatedAt,\n    });\n    if (updatedItem.affected === 0) {\n      throw new NotFoundException(`${id}のデータを更新できませんでした`);\n    }\n    return item;\n  }\n\n  async delete(id: string, user: User): Promise<void> {\n    const item = await this.findById(id);\n    if (item.userId !== user.id) {\n      throw new BadRequestException('他人の商品を削除することはできません');\n    }\n    const response = await this.itemRepository.delete({ id });\n    if (response.affected !== 1) {\n      throw new NotFoundException(`${id}のデータを削除できませんでした`);\n    }\n  }\n}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","module.exports = require(\"@nestjs/jwt\");","module.exports = require(\"@nestjs/passport\");","module.exports = require(\"@nestjs/typeorm\");","module.exports = require(\"bcrypt\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"passport-jwt\");","module.exports = require(\"tslib\");","module.exports = require(\"typeorm\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\n * This is not a production server yet!\n * This is only a minimal backend to get started.\n */\n\nimport { Logger, ValidationPipe } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\n\nimport { AppModule } from './app/app.module';\n\nasync function bootstrap() {\n  const app = await NestFactory.create(AppModule);\n  app.useGlobalPipes(new ValidationPipe());\n\n  const globalPrefix = 'api';\n  app.setGlobalPrefix(globalPrefix);\n  const port = process.env.PORT || 3000;\n  await app.listen(port);\n  Logger.log(\n    `🚀 Application is running on: http://localhost:${port}/${globalPrefix}`\n  );\n}\n\nbootstrap();\n"],"names":[],"sourceRoot":""}